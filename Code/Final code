# type: ignore
import board
import time
from time import sleep
import board
from digitalio import DigitalInOut, Direction, Pull        #The setups of everything we need for this code and there are important, without them the code doesn't work!
from pwmio import PWMOut
import busio
from adafruit_motor import motor as Motor
from lcd.lcd import LCD
from lcd.i2c_pcf8574_interface import I2CPCF8574Interface


sda_pin = board.GP2     # LCD set up
scl_pin = board.GP3
i2c = busio.I2C(scl_pin, sda_pin)


i2c_address = 0x27 # 39 decimal

# LCD display info
cols = 16
rows = 2


# Setup LCD display
interface = I2CPCF8574Interface(i2c, i2c_address)
lcd = LCD(interface, num_rows=rows, num_cols=cols)


lcd.set_cursor_pos(0, 0)   # Moves the cursor to the specified screen coordinates


DEBUG = False  # mode of operation; False = normal, True = debug
OP_DURATION = 5  # operation duration in seconds
drv8833_ain1 = PWMOut(board.GP16, frequency=50)
drv8833_ain2 = PWMOut(board.GP17, frequency=50)   # Motor driver set ups
drv8833_bin1 = PWMOut(board.GP15, frequency=50)
drv8833_bin2 = PWMOut(board.GP14, frequency=50)
drv8833_sleep = DigitalInOut(board.GP18)
motor_a = Motor.DCMotor(drv8833_ain1, drv8833_ain2) # motor setups 
motor_b = Motor.DCMotor(drv8833_bin1, drv8833_bin2)

button=DigitalInOut(board.GP13)
button.direction=Direction.INPUT  # Button set up
button.pull = Pull.DOWN 

def print_motor_status(motor):  # denfining the motors function 
    if motor == motor_a:
        motor_name = "A"   # perform basic motor control operations on motors A and B
    elif motor == motor_b:
        motor_name = "B"
    else:
        motor_name = "Unknown"
    print(f"Motor {motor_name} throttle is set to {motor.throttle}.")
def basic_operations():
    # Drive forward at full throttle
    motor_a.throttle = 1.0
    motor_b.throttle = 1.0

     #Drive backward at full throttle
    motor_a.throttle = 1.0
    motor_b.throttle = 1.0

    # Coast to a stop
    if DEBUG: print_motor_status(motor_a)
    sleep(OP_DURATION)

    # Brake to a stop
    if DEBUG: print_motor_status(motor_b)
    sleep(OP_DURATION)


drv8833_sleep.direction = Direction.OUTPUT # tells the direction of the motor driver 
drv8833_sleep.value = True  # enable (turn on) the motor driver
if DEBUG: print("Running in DEBUG mode.  Turn off for normal operation.")

motor_state = "off"
while True:
    #basic_operations()  
    if button.value == True and motor_state == "off":       
        print("Motors on")
         # Calculate the total number of seconds
        total_seconds = 10  # countdown seconds start
        motor_a.throttle=True 
        motor_b.throttle=True
        motor_state = "on"
        while total_seconds > 0:  # countdown seconds ends

            lcd.clear()

            print(total_seconds, end="\r")
            lcd.set_cursor_pos(0, 0)
            lcd.print(f"Countdown start: {total_seconds}           ")
            time.sleep(1)
            total_seconds = total_seconds-1
            #lcd.print("Done")
            lcd.set_cursor_pos(0, 0)
        motor_a.throttle=False
        motor_b.throttle=False
        motor_state = "off"
        lcd.print(f"Countdown DONE: {total_seconds}           ")

    elif button.value == True and motor_state == "on":    
        print("Motors off")
        motor_a.throttle=False
        motor_b.throttle=False
        motor_state = "off"
        time.sleep(0.5)
    
