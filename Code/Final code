# Import necessary libraries
import board
import time
from time import sleep
from digitalio import DigitalInOut, Direction, Pull
from pwmio import PWMOut
import busio
from adafruit_motor import motor as Motor
from lcd.lcd import LCD
from lcd.i2c_pcf8574_interface import I2CPCF8574Interface

# Set up I2C pins for LCD
sda_pin = board.GP2
scl_pin = board.GP3
i2c = busio.I2C(scl_pin, sda_pin)
i2c_address = 0x27  # 39 decimal

# LCD display info
cols = 16
rows = 2

# Initialize LCD display
interface = I2CPCF8574Interface(i2c, i2c_address)
lcd = LCD(interface, num_rows=rows, num_cols=cols)
lcd.set_cursor_pos(0, 0)  # Move cursor to specified screen coordinates

# Debug mode and operation duration
DEBUG = False
OP_DURATION = 5

# Set up motor driver pins
drv8833_ain1 = PWMOut(board.GP16, frequency=50)
drv8833_ain2 = PWMOut(board.GP17, frequency=50)
drv8833_bin1 = PWMOut(board.GP14, frequency=50)
drv8833_bin2 = PWMOut(board.GP15, frequency=50)
drv8833_sleep = DigitalInOut(board.GP18)
motor_a = Motor.DCMotor(drv8833_ain1, drv8833_ain2)
motor_b = Motor.DCMotor(drv8833_bin1, drv8833_bin2)

# Set up button
button = DigitalInOut(board.GP13)
button.direction = Direction.INPUT
button.pull = Pull.DOWN

def print_motor_status(motor):
    """Print motor throttle status."""
    if motor == motor_a:
        motor_name = "A"
    elif motor == motor_b:
        motor_name = "B"
    else:
        motor_name = "Unknown"
    print(f"Motor {motor_name} throttle is set to {motor.throttle}.")

def basic_operations():
    """Perform basic motor control operations."""
    # Drive forward at full throttle
    motor_a.throttle = 1.0
    motor_b.throttle = 1.0

    # Drive backward at full throttle
    motor_a.throttle = 1.0
    motor_b.throttle = 1.0

    # Coast to a stop
    if DEBUG:
        print_motor_status(motor_a)
    sleep(OP_DURATION)

    # Brake to a stop
    if DEBUG:
        print_motor_status(motor_b)
    sleep(OP_DURATION)

# Enable (turn on) the motor driver
drv8833_sleep.direction = Direction.OUTPUT
drv8833_sleep.value = True

if DEBUG:
    print("Running in DEBUG mode. Turn off for normal operation.")

motor_state = "off"
while True:
    # basic_operations()
    if button.value == True and motor_state == "off":
        print("Motors on")
        total_seconds = 30  # Countdown seconds start
        motor_a.throttle = True
        motor_b.throttle = True
        motor_state = "on"
        while total_seconds > 0:  # Countdown seconds end
            lcd.clear()
            print(total_seconds, end="\r")
            lcd.set_cursor_pos(0, 0)
            lcd.print(f"Countdown start: {total_seconds}           ")
            time.sleep(1)
            total_seconds -= 1
            lcd.set_cursor_pos(0, 0)
        motor_a.throttle = False
        motor_b.throttle = False
        motor_state = "off"
        lcd.print(f"Countdown DONE: {total_seconds}           ")
    elif button.value == True and motor_state == "on":
        print("Motors off")
        motor_a.throttle = False
        motor_b.throttle = False
        motor_state = "off"
        time.sleep(0.5)
